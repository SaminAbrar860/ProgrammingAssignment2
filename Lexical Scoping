## This function creates a cache matrix, which stores its inverse
makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  set <- function(y){
    x <<- y
    inv <<- NULL
}
  get <- function() x
  setinverse <- function(inverse) inv <<- inverse
  getinverse <- function() inv
  list(set = set, get = get,
       setinverse = setinverse,
       getinverse = getinverse)
}
## This function takes a matrix object x as an argument and returns its inverse matrix
## If the inverse matrix is already cached, it retrieves the cached data, otherwise it
## computes the inverse matrix and caches it for future use
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
    inv <- x$getinverse()
    if(!is.null(inv)){
      message("getting cached data")
      return(inv)
    }
    matrix_invert <- x$get()
    inv <- solve(matrix_invert, ...)
    x$setinverse(inv)
    inv
}
